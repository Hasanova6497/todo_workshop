[
    {
        "id": "5cbd3fd40e4a64e3",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4c54b9bacdc30866",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "64299d5575bff52f",
        "type": "http in",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "9d699dac44cc3783"
            ]
        ]
    },
    {
        "id": "e0b407dfe0d3cc89",
        "type": "http response",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 220,
        "wires": []
    },
    {
        "id": "e01d598a4bb98192",
        "type": "template",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"TR-tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar listesi </title>\n\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" >\n\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">           \n            <div class=\"col-md-8 offset-md-2\">  \n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>                    \n                </div>\n                {{/error}}\n                <form action=\"/opt/add\" method=\"post\">                 \n                    <div class=\"input-group input-group-lg\">\n                        <input required type=\"text\" name=\"name\"  class=\"form-control {{#error}} border-danger {{/error}}\"  placeholder=\"Yoğurt al... Ekmek al...\">\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-primary px-5\" type=\"submit\">Ekle</button>\n                    </div>\n                </form>\n                <div class=\"card mt-2 overflow-hidden\">\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover mt-0\">\n                                <thead class=\"table-dark\">\n                                    <tr>\n                                        <th colspan=\"2\"> iş </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {{#payload}}\n                                    <tr valign=\"middle\" >\n                                        <td>\n                                            {{#done}}\n                                            <h4 class=\"text-muted\"><del>{{name}}</del></h4>\n                                            {{/done}}\n                                            {{^done}}\n                                            <h4>{{name}}</h4>\n                                            {{/done}}\n                                            <div class=\"badge bg-secondary\"><small><i class=\"bi bi-calendar-heart\"></i>  {{date}}  {{time}} </div>                                          \n                                            </td>\n                                        <td align=\"right\">                                                                                       \n                                            <div class=\"btn-group \">\n                                                <form method=\"post\">\n                                                    <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n                                                {{#done}}\n                                                   <button data-bs-toggle=\"tooltip\" data-bs-title=\"Aç\" type=\"submit\" formaction=\"/opt/open\"  class=\"btn btn-warning\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                                {{/done}}\n                                                {{^done}}\n                                                 <a  data-bs-toggle=\"tooltip\" data-bs-title=\"Düzenle\" href=\"/edit/{{id}}\"   class=\"btn btn-info\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                                 <button  data-bs-toggle=\"tooltip\" data-bs-title=\"Hatırlatıcı\" type=\"submit\" class=\"btn btn-secondary\"><i class=\"bi bi-alarm-fill\"></i></button>\n                                                 <button  data-bs-toggle=\"tooltip\" data-bs-title=\"Tamamla\" type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\"><i class=\"bi bi-bag-check-fill\"></i></button>\n                                                {{/done}}\n                                                <button  data-bs-toggle=\"tooltip\" data-bs-title=\"Sil\" type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\"><i class=\"bi bi-trash2-fill\"></i></button>\n                                                </form>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {{/payload}}\n                                    {{^payload}}\n                                    <tr>\n                                        <td colspan=\"2\" class=\"text-muted text-center\"> Henüz hiç giriş yapılmadı....</td>                                \n                                     </tr>\n                                    {{/payload}}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>\n            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n            return new bootstrap.Tooltip(tooltipTriggerEl)\n            })\n        </script>    \n\n</body>",
        "output": "str",
        "x": 520,
        "y": 220,
        "wires": [
            [
                "e0b407dfe0d3cc89"
            ]
        ]
    },
    {
        "id": "0233691e2e32b6f2",
        "type": "function",
        "z": "5cbd3fd40e4a64e3",
        "name": "DB",
        "func": "//Flush DB\nglobal.set(\"DB\", {\n    todo:[]\n})\n\n\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst DB = global.get(\"DB\") || {\n    todo: []\n}\nglobal.set(\"DB\", DB)\n\n/*\n*TODO DB şema \n* id: NOW\n* name: \"\"\n* done: \"true | false\"\n* stamp: { \n* ip: IP,\n*user: \"\"\n*email: \" \"\n*date: \"GG.AA.YYYY\"\n*time: \"SS:DD\"\n*\n}\n\n**/",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 80,
        "wires": []
    },
    {
        "id": "4f3a7e593cdd0413",
        "type": "inject",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "0233691e2e32b6f2"
            ]
        ]
    },
    {
        "id": "9d699dac44cc3783",
        "type": "function",
        "z": "5cbd3fd40e4a64e3",
        "name": "db.todo.find()",
        "func": "const DB=global.get( \"DB\")\nmsg.payload=DB.todo.sort((a,b)=>b.stamp.createdAt-a.stamp.createdAt)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "e01d598a4bb98192"
            ]
        ]
    },
    {
        "id": "f880d6b66c32a6a6",
        "type": "link in",
        "z": "5cbd3fd40e4a64e3",
        "name": "link in 1",
        "links": [
            "7e8a253118753736",
            "a6827a601b48bb60",
            "4e39382a2dcf8a6e"
        ],
        "x": 185,
        "y": 160,
        "wires": [
            [
                "9d699dac44cc3783"
            ]
        ]
    },
    {
        "id": "02aec6ad98ca4314",
        "type": "http in",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 113.60000610351562,
        "y": 620.199951171875,
        "wires": [
            [
                "347f410edbb7f173"
            ]
        ]
    },
    {
        "id": "347f410edbb7f173",
        "type": "function",
        "z": "5cbd3fd40e4a64e3",
        "name": "validation",
        "func": "const typeLookup ={\n    trash:{\n        text: \"Silmek\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlamak\",\n        requireArgs: [\"id\"]\n        },\n    open: {\n        text: \"Açmak\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Eklemek\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncelle\",\n        requireArgs: [\"id\", \"name\"]\n    },\n     schedule: {\n        text: \"Hatırlatma kurmak\",\n        requireArgs: [\"id\"]\n        }\n}\nif(!Object.keys(typeLookup).includes(msg.req.params.type)) {\n   msg.error ={\n       message: `${msg.req.params.type} geçersiz bir parametre değeridir.`\n   }\n    return [null. msg]\n}\n\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n   msg.error ={\n       message: `${typeLookup[msg.req.params.type].text}  istediğiniz elemanın ${typeLookup[msg.req.params.type].requireArgs} bilgisi(leri)  olmalı.`\n   }\n    return [null. msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 333.6000061035156,
        "y": 620.199951171875,
        "wires": [
            [
                "1304e93c98a9651e"
            ],
            [
                "7e8a253118753736"
            ]
        ],
        "outputLabels": [
            "valid",
            "invalid"
        ]
    },
    {
        "id": "66f25b4d31741a1f",
        "type": "http response",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 800,
        "y": 620,
        "wires": []
    },
    {
        "id": "7e8a253118753736",
        "type": "link out",
        "z": "5cbd3fd40e4a64e3",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "f880d6b66c32a6a6"
        ],
        "x": 435,
        "y": 740,
        "wires": []
    },
    {
        "id": "a6827a601b48bb60",
        "type": "link out",
        "z": "5cbd3fd40e4a64e3",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "f880d6b66c32a6a6"
        ],
        "x": 705,
        "y": 660,
        "wires": []
    },
    {
        "id": "1304e93c98a9651e",
        "type": "function",
        "z": "5cbd3fd40e4a64e3",
        "name": "db.todo.opt()",
        "func": "const DB = global.get(\"DB\")\n\nlet todo = DB.todo\n\n const date= new Date()\n const now = date.getTime()\n\nif (msg.req.params.type===\"add\"){\n   \n    todo.push({\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            createdat: now,\n            ip: msg.req.ip,\n            user: \"\",\n            email: \"\"\n        },\n        date: date.toLocaleDateString(\"TR\"), //gg.aa.yyy\n        time: date.toLocaleTimeString(\"TR\")  // ss:dd\n    })\n\n} else{\n    const index = todo.findIndex(x => x.id == msg.payload.id)\n\n    if (!~index) {\n        msg.error = {\n            message: \" id ile eşleşen eleman bulunmamamktadır.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type==\"update\" && todo[index].done) {\n        msg.error = {\n            message: \" Tamamlanan işler güncellenemz.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type===\"trash\"){\n        todo.splice(index, 1)\n    } else if(msg.req.params.type===\"schedula\"){\n        //In-Memory Schedule\n    todo[index].schedula=msg.payload\n}\n    else{   }\n\nswitch (msg.req.params.type) {    \n    case \"complete\":\n        todo[index].done = true        \n        break;\n    case \"open\":\n        todo[index].done = false       \n        break;\n        case \"update\":\n         todo[index].name=msg.payload.name\n         break;\n}\n    todo[index].stamp = {\n        createdat: now,\n        ip: msg.req.ip,\n        user: \"\",\n        email: \"\"\n    }\n    todo[index].date = date.toLocaleDateString(\"TR\") //gg.aa.yyy\n    todo[index].time = date.toLocaleTimeString(\"TR\")  // ss:dd           \n        \n}\n\n\n\nDB.todo=todo\n\nglobal.set(\"DB\", DB)\n\nreturn msg",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "66f25b4d31741a1f"
            ],
            [
                "a6827a601b48bb60"
            ]
        ],
        "outputLabels": [
            "succces",
            "Error"
        ]
    },
    {
        "id": "6a7cc1719b7512e3",
        "type": "http in",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "e5dbdbf3697bca56"
            ]
        ]
    },
    {
        "id": "e5dbdbf3697bca56",
        "type": "function",
        "z": "5cbd3fd40e4a64e3",
        "name": "db.todo.findOne()",
        "func": "const DB=global.get( \"DB\")\n\nmsg.payload=DB.todo.find(x=>x.id==msg.req.params.id)\n\nif(!msg.payload){\n    msg.error={\n        messsage: \"İd ile eşleşen bir kayıt bulunamadı.\"\n    }\n    return[null,msg]\n}\n if ( msg.payload.done) {\n        msg.error = {\n            message: \" Tamamlanan işler güncellenemz.\"\n        }\n        return [null, msg]\n    }\n\nreturn msg\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "24094469fec0909e"
            ],
            [
                "4e39382a2dcf8a6e"
            ]
        ],
        "outputLabels": [
            "succ",
            "err"
        ]
    },
    {
        "id": "4e39382a2dcf8a6e",
        "type": "link out",
        "z": "5cbd3fd40e4a64e3",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "f880d6b66c32a6a6"
        ],
        "x": 445,
        "y": 440,
        "wires": []
    },
    {
        "id": "24094469fec0909e",
        "type": "template",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"TR-tr\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar listesi </title>\n\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\" >\n\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">           \n            <div class=\"col-md-8 offset-md-2\">  \n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>                    \n                </div>\n                {{/error}}\n                <form action=\"/opt/update\" method=\"post\">\n                <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\"/>\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" class=\"form-control form-control-lg {{#error}} border-danger {{/error}}{{^error}} border-info{{/error}} \"  placeholder=\"Yoğurt al... Ekmek al...\">\n                    </div>\n                    <div class=\"mb-3 float-end\">\n                        <a class=\"btn btn-outline-warning\" href=\"/\">Vazgeç</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Temizle</button>\n                        <button class=\"btn btn-success px-5\" type=\"submit\">Güncelle</button>\n                    </div>\n                </form>\n \n                    </div>\n                </div>\n            </div>\n\n        </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>\n            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'))\n            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n            return new bootstrap.Tooltip(tooltipTriggerEl)\n            })\n        </script>    \n\n</body>",
        "output": "str",
        "x": 520,
        "y": 400,
        "wires": [
            [
                "84a36337c578f7ba"
            ]
        ]
    },
    {
        "id": "84a36337c578f7ba",
        "type": "http response",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 400,
        "wires": []
    },
    {
        "id": "8c2f68ad4cb3bdcc",
        "type": "crontinject",
        "z": "5cbd3fd40e4a64e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "",
        "crontiArgs": "[]",
        "inputs": 0,
        "hasButton": true,
        "x": 1160,
        "y": 260,
        "wires": [
            []
        ]
    }
]